/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class JsPayload {
  constructor(data?: Buffer | undefined | null, metadata?: Buffer | undefined | null)
  getData(): Buffer | null
  getMetadata(): Buffer | null
  getDataUtf8(): string | null
  getMetadataUtf8(): string | null
  hasData(): boolean
  hasMetadata(): boolean
  dataLen(): number
  metadataLen(): number
  toString(): string
  static fromString(data: string, metadata?: string | undefined | null): JsPayload
  static fromJson(data: any, metadata?: any | undefined | null): JsPayload
}
export class JsPerformanceMetrics {
  constructor()
  recordRequest(): void
  recordResponse(latencyMs: number): void
  recordError(): void
  recordBytesSent(bytes: bigint): void
  recordBytesReceived(bytes: bigint): void
  getRequestCount(): bigint
  getResponseCount(): bigint
  getErrorCount(): bigint
  getAverageLatencyMs(): number
  getThroughputRps(): number
  getErrorRate(): number
  getBytesSent(): bigint
  getBytesReceived(): bigint
  getBandwidthMbps(): Record<string, number>
  getSummary(): Record<string, number>
  reset(): void
  getUptimeSeconds(): number
}
export class JsRSocketClient {
  constructor(transportConfig: JsTransportConfig)
  connect(): Promise<void>
  requestResponse(payload: JsPayload): Promise<JsPayload | null>
  requestStream(payload: JsPayload): Promise<Array<JsPayload>>
  fireAndForget(payload: JsPayload): Promise<void>
  requestChannel(payloads: Array<JsPayload>): Promise<Array<JsPayload>>
  close(): Promise<void>
  isConnected(): Promise<boolean>
  getTransportType(): string
  getAddress(): string
}
export class JsRSocketFactory {
  constructor()
  static createTcpClient(address: string): JsRSocketClient
  static createWebsocketClient(address: string): JsRSocketClient
  static createQuicClient(address: string): JsRSocketClient
  static createWebtransportClient(address: string): JsRSocketClient
  static createOptimizedClient(transportType: string, address: string, enableSimd?: boolean | undefined | null, enableWebworkers?: boolean | undefined | null): JsRSocketClient
  static createTcpServer(address: string): JsRSocketServer
  static createWebsocketServer(address: string): JsRSocketServer
  static createQuicServer(address: string): JsRSocketServer
  static createHighPerformanceServer(transportType: string, address: string, workerCount?: number | undefined | null): JsRSocketServer
}
export class JsRSocketServer {
  constructor(transportConfig: JsTransportConfig)
  setRequestHandler(handler: (payload: JsPayload) => Promise<JsPayload | null>): Promise<void>
  start(): Promise<void>
  stop(): Promise<void>
  isRunning(): Promise<boolean>
  getTransportType(): string
  getAddress(): string
}
export class JsTransportConfig {
  constructor(transportType: JsTransportType, address: string, options?: Record<string, string> | undefined | null)
  setOption(key: string, value: string): void
  getOption(key: string): string | null
  enableCrossbeamOptimizations(): void
  enableSimdProcessing(): void
  enableWebworkers(): void
  setWebworkersCount(count: number): void
  setPerformanceMode(mode: string): void
  setBufferSize(size: number): void
  enableCompression(enabled: boolean): void
  toString(): string
  getAllOptions(): Record<string, string>
}
export class JsTransportType {
  constructor(transportType: string)
  toString(): string
  static tcp(): JsTransportType
  static websocket(): JsTransportType
  static quinnQuic(): JsTransportType
  static quinnWebtransport(): JsTransportType
  static irohRoq(): JsTransportType
  static wasmWebworkers(): JsTransportType
  static irohP2p(): JsTransportType
  static irohP2pWasm(): JsTransportType
}
export function benchmarkTransportPerformance(transportType: string, iterations: number): Record<string, number>
export function createClient(transportConfig: JsTransportConfig): JsRSocketClient
export function createPayload(data?: Buffer | undefined | null, metadata?: Buffer | undefined | null): JsPayload
export function createServer(transportConfig: JsTransportConfig): JsRSocketServer
export function enableCrossbeamOptimizations(enabled: boolean): boolean
export function getPerformanceMetrics(): JsPerformanceMetrics
export function getSupportedTransports(): Array<string>
export function getVersion(): string
export function initializeLogger(): void
